})
# Estimation under Laplace approximation ----------------------------------
# initiation
par.m.hat <- c(2, .5)
# par.m.hat <- rep(1, length(par.true))
f.m.hat <- rep(1, m.size)
jitter.v <- .01
iteration <- 0
threshold <- 1e-4
repeat({
iteration <- iteration + 1
print(iteration)
par.m.hat.old <- par.m.hat
if (iteration == 1) {
CG.mod <- optim(f.m.hat, fn = neg.likelihood.m, gr = neg.d.likelihood.m, method = 'CG')
f.m.hat <- CG.mod$par
}
par.opt <- optim(par.m.hat, logZ.m, d.logZ.m, method = 'CG', control = list(maxit = 1e2))
par.m.hat <- par.opt$par
print(par.m.hat)
CG.mod <- optim(f.m.hat, fn = neg.likelihood.m, gr = neg.d.likelihood.m, method = 'CG')
f.m.hat <- CG.mod$par
if (sum(abs(par.m.hat.old - par.m.hat)) < threshold) break
})
# Predictions with Laplace approximation ----------------------------------
test.size <- population.size
X.test <- X.sample
K.mm <- K.mm.f(par.m.hat)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.hat.ld.star <- K.hat.ld.star.f(par.m.hat)
K.hat.d.star <- K.hat.d.star.f(par.m.hat)
f.ld.star <- t(K.hat.ld.star) %*% inv.K.mm %*% f.m.hat
V <- zapsmall(K.hat.d.star - t(K.hat.ld.star) %*% inv.K.mm %*% K.hat.ld.star)
sds.ld <- sqrt(diag(V))
par(mfrow = c(2,1), oma = c(1,0,1,0) +.1, mar = c(0,0,2,0))
plot(z ~ X.test[, 1], ylim = c(min(z), max(z)) * 1.05, type = 'l', xaxt = "n", yaxt = "n")
abline(h = 0, col = ggplot2::alpha('gray20', .5))
mtext("GP", side = 3, line = .5, cex = .8)
lines(f.ld.star ~ X.test[, 1], col = 2, lty = 1)
lines(f.ld.star + 2 * sds.ld ~ X.test[, 1], lty = 2, col = 2)
lines(f.ld.star - 2 * sds.ld ~ X.test[, 1], lty = 2, col = 2)
legend(
'topleft',
legend = c("true", "full", "sparse"), title = "model:",
col = c(1, 4, 2),
lty = 1,
cex = .7
)
plot(p ~ X.test[, 1], ylim = c(0, max(y.sample) + 1), type = 'l', xaxt = "n", yaxt = "n")
mtext("Poisson rate and realizations", side = 3, line = .5, cex = .8)
points(y.sample ~ X.sample[, 1], pch = 3, cex = .8)
points(rep(0, m.size) ~ X.m[, 1], pch = 16, col = 2, cex = .5)
lines(link(f.ld.star) ~ X.test[, 1], type = 'l', col = 2)
# lines(link(f.ld.star) ~ X.test, type = 'l', col = 3) # additional command to plot output with numerical derivatives
lines(link(f.ld.star + 2 * sds.ld) ~ X.test[, 1], lty = 2, col = 2)
lines(link(f.ld.star - 2 * sds.ld) ~ X.test[, 1], lty = 2, col = 2)
legend(
'topleft',
legend = c("sample", "sparse inputs"),
col = c(1, 2),
pch = c(3, 16),
cex = .7
)
# Functions ---------------------------------------------------------------
link <- function(z) {
exp(z)
}
link <- Vectorize(link)
sample.s <- function(par) {
sapply(par, rpois, n = 1)
}
sample.s <- Vectorize(sample.s)
likelihood.m <- function(y, f, M) {
# sum(dpois(y, exp(M %*% f), log = T))
mf <- c(M %*% f)
sum(y * mf - exp(mf) - lfactorial(y))
}
d.likelihood.m <- function(y, f, M) {
E <- exp(c(M %*% f))
sapply(seq(length(f)), function(j) {
# y %*% M[, j] - E %*% M[, j]
(y - E) %*% M[, j]
})
}
d2.likelihood.m <- function(y, f, M) {
E <- exp(c(M %*% f))
mx.out <- matrix(NA, length(f), length(f))
sapply(seq(m.size), function(j) {
sapply(seq(m.size), function(k) {
mx.out[j, k] <<- - E %*% (M[, j] * M[, k])
})})
}
d3.likelihood.m <- function(y, f, M, i) {
E <- exp(c(M %*% f))
mx.out <- c()
sapply(seq(m.size), function(k) {
mx.out[k] <<- - E %*% (M[, k] * M[, k] * M[, i])
})
}
neg.likelihood.m <- function(f) {
K.mm <- rcpp_k_se(X.m, X.m, par.m.hat[1], par.m.hat[2], T) + diag(jitter.v, m.size)
K.nm <- rcpp_k_se(X.sample, X.m, par.m.hat[1], par.m.hat[2], F)
inv.K.mm <- chol2inv(chol(K.mm))
M <- K.nm %*% inv.K.mm
return(- sum(dpois(y.sample, exp(M %*% f), log = T)))
}
neg.d.likelihood.m <- function(f) {
K.mm <- rcpp_k_se(X.m, X.m, par.m.hat[1], par.m.hat[2], T) + diag(jitter.v, m.size)
K.nm <- rcpp_k_se(X.sample, X.m, par.m.hat[1], par.m.hat[2], F)
inv.K.mm <- chol2inv(chol(K.mm))
M <- K.nm %*% inv.K.mm
E <- exp(c(M %*% f))
return(- sapply(seq(length(f)), function(j) {
# y %*% M[, j] - E %*% M[, j]
(y.sample - E) %*% M[, j]
}))
}
f.m.mode.finder <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
if (log(kappa(K.mm, exact = F), 10) > 4) warning("Condition number of order greater than 4.")
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
inv.K.mm <- chol2inv(chol(K.mm))
M <- K.nm %*% inv.K.mm
# NM algorithm
condition <- 1
iteration <- 0
iteration.max <- 1e2
while (condition > 1e-10 && iteration < iteration.max) {
# initial auxiliary stuff
f.m.old <- f.m
iteration <- iteration + 1
# NM step
W <- - d2.likelihood.m(y.sample, f.m, M)
U <- chol(inv.K.mm + W)
b1 <- W %*% f.m + d.likelihood.m(y.sample, f.m, M)
b2 <- forwardsolve(t(U), b1)
f.m <- backsolve(U, b2)
# final auxiliary stuff
condition <- norm(f.m.old - f.m)
}
return(f.m)
}
logZ.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
chol.A <- chol(inv.K.mm + W)
logZ <- sum(dpois(y.sample, exp(M %*% f.m), log = T)) -
.5 * t(f.m) %*% inv.K.mm %*% f.m - sum(log(diag(chol.K.mm))) - sum(log(diag(chol.A)))
return(- as.numeric(logZ))
}
d.f.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
d.K.mm.l <- rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T)
d.K.mm.s <- rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T)
dfm <- list(solve(diag(m.size) + K.mm %*% W, d.K.mm.l %*% d.likelihood.m(y.sample, f.m, M)),
solve(diag(m.size) + K.mm %*% W, d.K.mm.s %*% d.likelihood.m(y.sample, f.m, M)))
return(dfm)
}
# cbind(
#   (f.m.mode.finder(par.hat + c(1e-6, 0), f.m.hat) - f.m.mode.finder(par.hat - c(1e-6, 0), f.m.hat)) / 2e-6,
#   d.f.m(par.hat, f.m.hat)[[1]]
# )
# cbind(
#   (f.m.mode.finder(par.hat + c(0, 1e-6), f.m.hat) - f.m.mode.finder(par.hat - c(0, 1e-6), f.m.hat)) / 2e-6,
#   d.f.m(par.hat, f.m.hat)[[2]]
# ) # NEEDS MORE CHECKS
log.lik <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
return(
sum(dpois(y.sample, exp(M %*% f.m), log = T)) -
.5 * t(f.m) %*% inv.K.mm %*% f.m -
sum(log(diag(chol.K.mm)))
)
}
d.log.lik <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
d.log.lik <- c()
d.log.lik[1] <- t(y.sample) %*% rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T)))
d.log.lik[2] <- t(y.sample) %*% rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T)))
return(d.log.lik)
}
# c((log.lik(par.hat + c(1e-6, 0)) - log.lik(par.hat + c(-1e-6, 0))),
#   (log.lik(par.hat + c(0, 1e-6)) - log.lik(par.hat + c(0, -1e-6)))) / 2e-6
# d.log.lik(par.hat) # OK
d.logZ.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
chol.A <- chol(inv.K.mm + W)
inv.A <- chol2inv(chol.A)
output <- c()
output[1] <- t(y.sample) %*% rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T))) +
.5 * sum(diag(inv.K.mm %*% inv.A %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T))) -
.5 * t(d.f.m(par.hat)[[1]]) %*% # USING CLOSED FORM D - GO TO OPTION
# .5 * t((f.m.mode.finder(par.hat + c(1e-6, 0), f.m.hat) - f.m.mode.finder(par.hat - c(1e-6, 0), f.m.hat)) / 2e-6) %*% # USING NUMERICAL D
sapply(seq(m.size), function(h) {diag(inv.A) %*% d3.likelihood.m(y.sample, f.m.hat, M, h)})
output[2] <- t(y.sample) %*% rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T))) +
.5 * sum(diag(inv.K.mm %*% inv.A %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T))) -
.5 * t(d.f.m(par.hat)[[2]]) %*% # USING CLOSED FORM D - GO TO OPTION
# .5 * t((f.m.mode.finder(par.hat + c(0, 1e-6), f.m.hat) - f.m.mode.finder(par.hat - c(0, 1e-6), f.m.hat)) / 2e-6) %*% # USING NUMERICAL D
sapply(seq(m.size), function(h) {diag(inv.A) %*% d3.likelihood.m(y.sample, f.m.hat, M, h)})
return(- output)
}
# c(logZ.m(par.hat + c(1e-10, 0)) - logZ.m(par.hat + c(-1e-10, 0)),
#   logZ.m(par.hat + c(0, 1e-10)) - logZ.m(par.hat + c(0, -1e-10))) / 2e-10
# d.logZ.m(par.hat)
# initiation
par.m.hat <- c(2, .5)
# par.m.hat <- rep(1, 2)
f.m.hat <- rep(1, m.size)
jitter.v <- .01
iteration <- 0
threshold <- 1e-4
repeat({
iteration <- iteration + 1
print(iteration)
par.m.hat.old <- par.m.hat
if(iteration == 1) {
CG.mod <- optim(f.m.hat, fn = neg.likelihood.m, gr = neg.d.likelihood.m, method = 'CG')
f.m.hat <- CG.mod$par
}
par.opt <- optim(par.m.hat, logZ.m, d.logZ.m, method = 'CG', control = list(maxit = 5))
par.m.hat <- par.opt$par
print(par.m.hat)
f.m.hat.attempt <- try(f.m.mode.finder(par.m.hat, f.m.hat))
CG.mod <- optim(f.m.hat, fn = neg.likelihood.m, gr = neg.d.likelihood.m, method = 'CG')
f.m.hat <- CG.mod$par
if (sum(abs(par.m.hat.old - par.m.hat)) < threshold) break
})
# Functions ---------------------------------------------------------------
link <- function(z) {
exp(z)
}
link <- Vectorize(link)
sample.s <- function(par) {
sapply(par, rpois, n = 1)
}
sample.s <- Vectorize(sample.s)
likelihood.m <- function(y, f, M) {
# sum(dpois(y, exp(M %*% f), log = T))
mf <- c(M %*% f)
sum(y * mf - exp(mf) - lfactorial(y))
}
d.likelihood.m <- function(y, f, M) {
E <- exp(c(M %*% f))
sapply(seq(length(f)), function(j) {
# y %*% M[, j] - E %*% M[, j]
(y - E) %*% M[, j]
})
}
d2.likelihood.m <- function(y, f, M) {
E <- exp(c(M %*% f))
mx.out <- matrix(NA, length(f), length(f))
sapply(seq(m.size), function(j) {
sapply(seq(m.size), function(k) {
mx.out[j, k] <<- - E %*% (M[, j] * M[, k])
})})
}
d3.likelihood.m <- function(y, f, M, i) {
E <- exp(c(M %*% f))
mx.out <- c()
sapply(seq(m.size), function(k) {
mx.out[k] <<- - E %*% (M[, k] * M[, k] * M[, i])
})
}
f.m.mode.finder <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
if (log(kappa(K.mm, exact = F), 10) > 4) warning("Condition number of order greater than 4.")
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
inv.K.mm <- chol2inv(chol(K.mm))
M <- K.nm %*% inv.K.mm
# NM algorithm
condition <- 1
iteration <- 0
iteration.max <- 1e2
while (condition > 1e-10 && iteration < iteration.max) {
# initial auxiliary stuff
f.m.old <- f.m
iteration <- iteration + 1
# NM step
W <- - d2.likelihood.m(y.sample, f.m, M)
U <- chol(inv.K.mm + W)
b1 <- W %*% f.m + d.likelihood.m(y.sample, f.m, M)
b2 <- forwardsolve(t(U), b1)
f.m <- backsolve(U, b2)
# final auxiliary stuff
condition <- norm(f.m.old - f.m)
}
return(f.m)
}
logZ.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
chol.A <- chol(inv.K.mm + W)
logZ <- sum(dpois(y.sample, exp(M %*% f.m), log = T)) -
.5 * t(f.m) %*% inv.K.mm %*% f.m - sum(log(diag(chol.K.mm))) - sum(log(diag(chol.A)))
return(- as.numeric(logZ))
}
d.f.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
d.K.mm.l <- rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T)
d.K.mm.s <- rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T)
dfm <- list(solve(diag(m.size) + K.mm %*% W, d.K.mm.l %*% d.likelihood.m(y.sample, f.m, M)),
solve(diag(m.size) + K.mm %*% W, d.K.mm.s %*% d.likelihood.m(y.sample, f.m, M)))
return(dfm)
}
# cbind(
#   (f.m.mode.finder(par.hat + c(1e-6, 0), f.m.hat) - f.m.mode.finder(par.hat - c(1e-6, 0), f.m.hat)) / 2e-6,
#   d.f.m(par.hat, f.m.hat)[[1]]
# )
# cbind(
#   (f.m.mode.finder(par.hat + c(0, 1e-6), f.m.hat) - f.m.mode.finder(par.hat - c(0, 1e-6), f.m.hat)) / 2e-6,
#   d.f.m(par.hat, f.m.hat)[[2]]
# ) # NEEDS MORE CHECKS
log.lik <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
return(
sum(dpois(y.sample, exp(M %*% f.m), log = T)) -
.5 * t(f.m) %*% inv.K.mm %*% f.m -
sum(log(diag(chol.K.mm)))
)
}
d.log.lik <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
d.log.lik <- c()
d.log.lik[1] <- t(y.sample) %*% rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T)))
d.log.lik[2] <- t(y.sample) %*% rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T)))
return(d.log.lik)
}
# c((log.lik(par.hat + c(1e-6, 0)) - log.lik(par.hat + c(-1e-6, 0))),
#   (log.lik(par.hat + c(0, 1e-6)) - log.lik(par.hat + c(0, -1e-6)))) / 2e-6
# d.log.lik(par.hat) # OK
d.logZ.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .01) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
chol.A <- chol(inv.K.mm + W)
inv.A <- chol2inv(chol.A)
output <- c()
output[1] <- t(y.sample) %*% rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T))) +
.5 * sum(diag(inv.K.mm %*% inv.A %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T))) -
.5 * t(d.f.m(par.hat)[[1]]) %*% # USING CLOSED FORM D - GO TO OPTION
# .5 * t((f.m.mode.finder(par.hat + c(1e-6, 0), f.m.hat) - f.m.mode.finder(par.hat - c(1e-6, 0), f.m.hat)) / 2e-6) %*% # USING NUMERICAL D
sapply(seq(m.size), function(h) {diag(inv.A) %*% d3.likelihood.m(y.sample, f.m.hat, M, h)})
output[2] <- t(y.sample) %*% rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T))) +
.5 * sum(diag(inv.K.mm %*% inv.A %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T))) -
.5 * t(d.f.m(par.hat)[[2]]) %*% # USING CLOSED FORM D - GO TO OPTION
# .5 * t((f.m.mode.finder(par.hat + c(0, 1e-6), f.m.hat) - f.m.mode.finder(par.hat - c(0, 1e-6), f.m.hat)) / 2e-6) %*% # USING NUMERICAL D
sapply(seq(m.size), function(h) {diag(inv.A) %*% d3.likelihood.m(y.sample, f.m.hat, M, h)})
return(- output)
}
# c(logZ.m(par.hat + c(1e-10, 0)) - logZ.m(par.hat + c(-1e-10, 0)),
#   logZ.m(par.hat + c(0, 1e-10)) - logZ.m(par.hat + c(0, -1e-10))) / 2e-10
# d.logZ.m(par.hat)
# Estimation under Laplace approximation ----------------------------------
# initiation
par.m.hat <- c(2, .5)
# par.m.hat <- rep(1, 2)
f.m.hat <- rep(1, m.size)
jitter.v <- .01
iteration <- 0
threshold <- 1e-4
repeat({
iteration <- iteration + 1
par.m.hat.old <- par.m.hat
if(iteration == 1) f.m.hat.attempt <- try(f.m.mode.finder(par.m.hat, f.m.hat))
if(class(f.m.hat.attempt) == 'try-error') {
K.mm <- Reduce('+', lapply(covariance.calls[['K.mm']], eval))
if (log(kappa(K.mm, exact = F), 10) > 4) warning("Condition number of order greater than 4.")
K.nm <- Reduce('+', lapply(covariance.calls[['K.nm']], eval))
inv.K.mm <- chol2inv(chol(K.mm))
M <- K.nm %*% inv.K.mm
CG.mod <- optim(f.m.hat, fn = neg.likelihood.m, gr = neg.d.likelihood.m, method = 'CG')
f.m.hat <- CG.mod$par
} else {
f.m.hat <- f.m.hat.attempt
}
par.opt <- optim(par.m.hat, logZ.m, d.logZ.m, method = 'CG')
par.m.hat <- par.opt$par
print(par.m.hat)
f.m.hat.attempt <- try(f.m.mode.finder(par.m.hat, f.m.hat))
if(class(f.m.hat.attempt) == 'try-error') {
K.mm <- Reduce('+', lapply(covariance.calls[['K.mm']], eval))
if (log(kappa(K.mm, exact = F), 10) > 4) warning("Condition number of order greater than 4.")
K.nm <- Reduce('+', lapply(covariance.calls[['K.nm']], eval))
inv.K.mm <- chol2inv(chol(K.mm))
M <- K.nm %*% inv.K.mm
CG.mod <- optim(f.m.hat, fn = neg.likelihood.m, gr = neg.d.likelihood.m, method = 'CG')
f.m.hat <- CG.mod$par
} else {
f.m.hat <- f.m.hat.attempt
}
if (sum(abs(par.m.hat.old - par.m.hat)) < threshold) break
})
warnings()
test.size <- population.size
X.test <- as.matrix(sort(sample(seq(x.limits[1], x.limits[2], length.out =  test.size))))
diag.jitter <- .01
K.mm <- rcpp_k_se(X.m, X.m, par.m.hat[1], par.m.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.hat.ld.star <- rcpp_k_se(X.m, X.test, par.m.hat[1], par.m.hat[2], F)
K.hat.d.star <- rcpp_k_se(X.test, X.test, par.m.hat[1], par.m.hat[2], T)
f.ld.star <- t(K.hat.ld.star) %*% inv.K.mm %*% f.m.hat
V <- zapsmall(K.hat.d.star - t(K.hat.ld.star) %*% inv.K.mm %*% K.hat.ld.star)
K.hat.ld.star <- rcpp_k_se(X.m, X.test, par.m.hat[1], par.m.hat[2], F)
X.m
test.size <- population.size
X.test <- X.sample
diag.jitter <- .01
K.mm <- rcpp_k_se(X.m, X.m, par.m.hat[1], par.m.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.hat.ld.star <- rcpp_k_se(X.m, X.test, par.m.hat[1], par.m.hat[2], F)
K.hat.d.star <- rcpp_k_se(X.test, X.test, par.m.hat[1], par.m.hat[2], T)
f.ld.star <- t(K.hat.ld.star) %*% inv.K.mm %*% f.m.hat
V <- zapsmall(K.hat.d.star - t(K.hat.ld.star) %*% inv.K.mm %*% K.hat.ld.star)
sds.ld <- sqrt(diag(V))
par(mfrow = c(2,1), oma = c(1,0,1,0) +.1, mar = c(0,0,2,0))
plot(z ~ X, xlim = x.limits, ylim = c(min(z), max(z)) * 1.05, type = 'l', xaxt = "n", yaxt = "n")
lines(link(f.ld.star) ~ X.test[, 1], type = 'l', col = 3) # additional command to plot output with numerical derivatives
lines(link(f.ld.star - 2 * sds.ld) ~ X.test[, 1], lty = 2, col = 3) # additional command to plot output with numerical derivatives
lines(link(f.ld.star + 2 * sds.ld) ~ X.test[, 1], lty = 2, col = 3) # additional command to plot output with numerical derivatives
