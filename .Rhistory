rm(list = ls())
library(RcppArmadillo)
library(microbenchmark)
library(parallel)
source("~/Dropbox (INSEAD)/Crime Modeling/GP functions - 20200417.R")
load(file = '~/Dropbox (INSEAD)/Crime Modeling/Resources/crime.data.by_week.subset_6y.Rdata')
y.sample <- with(data.sub, tapply(y, week, mean))
sample.size <- length(y.sample)
X.sample <- as.matrix(as.numeric(names(y.sample)) - min(as.numeric(names(y.sample))) + 1)
y.sample <- as.vector(y.sample)
X.sample
X.m <- head(X.sample, 10)
m.size <- nrow(X.m)
X.n <- tail(X.sample, 20)
batch.size <- nrow(X.n)
X.m
X.n
X.m <- head(X.sample, 10)
m.size <- nrow(X.m)
X.m.2 <- rnorm(m.size)
X.n <- tail(X.sample, 20)
batch.size <- nrow(X.n)
X.n.2 <- rnorm(batch.size)
y.svi <- as.matrix(tail(y.sample, 20))
par.svi <- c(240, 20, 30)
jitter.v <- 1e-2
par.svi <- c(240, 20, 30, 6)
jitter.v <- 1e-2
covariance.calls <- lapply(list(
K.mm = "k.per(X.m, X.m, l = par.svi[1], s = par.svi[2], 52) * k.se(X.m.2, X.m.2, l = par.svi[3], s = 1) + diag(jitter.v, m.size)",
K.mn = "k.per(X.m, X.n, l = par.svi[1], s = par.svi[2], 52) * k.se(X.m.2, X.n.2, l = par.svi[3], s = 1)",
K.nn = "k.per(X.n, X.n, l = par.svi[1], s = par.svi[2], 52) * k.per(X.n.2, X.n.2, l = par.svi[3], s = 1)"
), function(i) parse(text = i))
m.svi <- runif(m.size)
S.svi <- k.se(X.m, X.m, l = par.svi[1], s = par.svi[2]) + diag(jitter.v, m.size)
K.mm <- covariance.eval('K.mm')
U.mm <- chol(K.mm)
inv.K.mm <- chol2inv(U.mm)
K.mn <- covariance.eval('K.mn')
K.nn <- covariance.eval('K.nn')
K.tilde <- K.nn - t(K.mn) %*% inv.K.mm %*% K.mn
Lambda <- inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm / tail(par.svi, 1) + inv.K.mm
U.S.svi <- chol(S.svi)
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_svi.cpp")
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_svi.cpp")
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_svi.cpp")
step.k.perse.l.svi <- function(X.m, X.n, relevant.l, relevant.s, relevant.m, sigma.sq.svi) {
d.K.mm <- d.k.per.l(X.m, X.m, relevant.l, relevant.s, 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.l(X.m, X.n, relevant.l, relevant.s, 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.l(X.n, X.n, relevant.l, relevant.s, 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
step.k.perse.s.svi <- function(X.m, X.n, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.s(X.m, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.s(X.m, X.n, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.s(X.n, X.n, relevant.l, relevant.s, p = 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
step.k.perse.l.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, relevant.m, sigma.sq.svi) {
d.K.mm <- d.k.per.l(X.m, X.m, relevant.l, relevant.s, 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.l(X.m, X.n, relevant.l, relevant.s, 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.l(X.n, X.n, relevant.l, relevant.s, 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
step.k.perse.s.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.s(X.m, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.s(X.m, X.n, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.s(X.n, X.n, relevant.l, relevant.s, p = 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
X.m <- head(X.sample, 10)
m.size <- nrow(X.m)
X.m.2 <- as.matrix(rnorm(m.size))
X.n <- tail(X.sample, 20)
batch.size <- nrow(X.n)
X.n.2 <- as.matrix(rnorm(batch.size))
y.svi <- as.matrix(tail(y.sample, 20))
par.svi <- c(240, 20, 30, 6)
jitter.v <- 1e-2
covariance.calls <- lapply(list(
K.mm = "k.per(X.m, X.m, l = par.svi[1], s = par.svi[2], 52) * k.se(X.m.2, X.m.2, l = par.svi[3], s = 1) + diag(jitter.v, m.size)",
K.mn = "k.per(X.m, X.n, l = par.svi[1], s = par.svi[2], 52) * k.se(X.m.2, X.n.2, l = par.svi[3], s = 1)",
K.nn = "k.per(X.n, X.n, l = par.svi[1], s = par.svi[2], 52) * k.per(X.n.2, X.n.2, l = par.svi[3], s = 1)"
), function(i) parse(text = i))
m.svi <- runif(m.size)
S.svi <- k.se(X.m, X.m, l = par.svi[1], s = par.svi[2]) + diag(jitter.v, m.size)
K.mm <- covariance.eval('K.mm')
U.mm <- chol(K.mm)
inv.K.mm <- chol2inv(U.mm)
K.mn <- covariance.eval('K.mn')
K.nn <- covariance.eval('K.nn')
K.tilde <- K.nn - t(K.mn) %*% inv.K.mm %*% K.mn
Lambda <- inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm / tail(par.svi, 1) + inv.K.mm
U.S.svi <- chol(S.svi)
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_svi.cpp")
step.k.perse.l.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, relevant.m, sigma.sq.svi) {
d.K.mm <- d.k.per.l(X.m, X.m, relevant.l, relevant.s, 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.l(X.m, X.n, relevant.l, relevant.s, 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.l(X.n, X.n, relevant.l, relevant.s, 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
step.k.perse.s.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.s(X.m, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.s(X.m, X.n, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.s(X.n, X.n, relevant.l, relevant.s, p = 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
step.k.per.l.svi
all.equal(
as.numeric(step.k.perse.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.perse.l.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
rm(list = ls())
library(RcppArmadillo)
library(microbenchmark)
library(parallel)
source("~/Dropbox (INSEAD)/Crime Modeling/GP functions - 20200417.R")
load(file = '~/Dropbox (INSEAD)/Crime Modeling/Resources/crime.data.by_week.subset_6y.Rdata')
y.sample <- with(data.sub, tapply(y, week, mean))
sample.size <- length(y.sample)
X.sample <- as.matrix(as.numeric(names(y.sample)) - min(as.numeric(names(y.sample))) + 1)
y.sample <- as.vector(y.sample)
X.m <- head(X.sample, 10)
m.size <- nrow(X.m)
X.m.2 <- as.matrix(rnorm(m.size))
X.n <- tail(X.sample, 20)
batch.size <- nrow(X.n)
X.n.2 <- as.matrix(rnorm(batch.size))
y.svi <- as.matrix(tail(y.sample, 20))
par.svi <- rgamma(4, .5, .5)
jitter.v <- 1e-2
covariance.calls <- lapply(list(
K.mm = "k.per(X.m, X.m, l = par.svi[1], s = par.svi[2], 52) * k.se(X.m.2, X.m.2, l = par.svi[3], s = 1) + diag(jitter.v, m.size)",
K.mn = "k.per(X.m, X.n, l = par.svi[1], s = par.svi[2], 52) * k.se(X.m.2, X.n.2, l = par.svi[3], s = 1)",
K.nn = "k.per(X.n, X.n, l = par.svi[1], s = par.svi[2], 52) * k.per(X.n.2, X.n.2, l = par.svi[3], s = 1)"
), function(i) parse(text = i))
m.svi <- runif(m.size)
S.svi <- k.se(X.m, X.m, l = par.svi[1], s = par.svi[2]) + diag(jitter.v, m.size)
K.mm <- covariance.eval('K.mm')
U.mm <- chol(K.mm)
inv.K.mm <- chol2inv(U.mm)
K.mn <- covariance.eval('K.mn')
K.nn <- covariance.eval('K.nn')
K.tilde <- K.nn - t(K.mn) %*% inv.K.mm %*% K.mn
Lambda <- inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm / tail(par.svi, 1) + inv.K.mm
U.S.svi <- chol(S.svi)
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_svi.cpp")
step.k.perse.l.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, relevant.m, sigma.sq.svi) {
d.K.mm <- d.k.per.l(X.m, X.m, relevant.l, relevant.s, 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.l(X.m, X.n, relevant.l, relevant.s, 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.l(X.n, X.n, relevant.l, relevant.s, 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
step.k.perse.s.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.s(X.m, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.s(X.m, X.n, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.s(X.n, X.n, relevant.l, relevant.s, p = 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.perse.l.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
rm(list = ls())
library(RcppArmadillo)
library(microbenchmark)
library(parallel)
source("~/Dropbox (INSEAD)/Crime Modeling/GP functions - 20200417.R")
load(file = '~/Dropbox (INSEAD)/Crime Modeling/Resources/crime.data.by_week.subset_6y.Rdata')
y.sample <- with(data.sub, tapply(y, week, mean))
sample.size <- length(y.sample)
X.sample <- as.matrix(as.numeric(names(y.sample)) - min(as.numeric(names(y.sample))) + 1)
y.sample <- as.vector(y.sample)
X.m <- head(X.sample, 10)
m.size <- nrow(X.m)
X.m.2 <- as.matrix(rnorm(m.size))
X.n <- tail(X.sample, 20)
batch.size <- nrow(X.n)
X.n.2 <- as.matrix(rnorm(batch.size))
y.svi <- as.matrix(tail(y.sample, 20))
par.svi <- rgamma(4, .5, .5)
jitter.v <- 1e-2
covariance.calls <- lapply(list(
K.mm = "k.per(X.m, X.m, l = par.svi[1], s = par.svi[2], 52) * k.se(X.m.2, X.m.2, l = par.svi[3], s = 1) + diag(jitter.v, m.size)",
K.mn = "k.per(X.m, X.n, l = par.svi[1], s = par.svi[2], 52) * k.se(X.m.2, X.n.2, l = par.svi[3], s = 1)",
K.nn = "k.per(X.n, X.n, l = par.svi[1], s = par.svi[2], 52) * k.per(X.n.2, X.n.2, l = par.svi[3], s = 1)"
), function(i) parse(text = i))
m.svi <- runif(m.size)
S.svi <- k.se(X.m, X.m, l = par.svi[1], s = par.svi[2]) + diag(jitter.v, m.size)
K.mm <- covariance.eval('K.mm')
U.mm <- chol(K.mm)
inv.K.mm <- chol2inv(U.mm)
K.mn <- covariance.eval('K.mn')
K.nn <- covariance.eval('K.nn')
K.tilde <- K.nn - t(K.mn) %*% inv.K.mm %*% K.mn
Lambda <- inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm / tail(par.svi, 1) + inv.K.mm
U.S.svi <- chol(S.svi)
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_svi.cpp")
step.k.perse.l.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, relevant.m, sigma.sq.svi) {
d.K.mm <- d.k.per.l(X.m, X.m, relevant.l, relevant.s, 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.l(X.m, X.n, relevant.l, relevant.s, 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.l(X.n, X.n, relevant.l, relevant.s, 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
step.k.perse.s.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.s(X.m, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.s(X.m, X.n, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.s(X.n, X.n, relevant.l, relevant.s, p = 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.perse.l.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
as.numeric(step.k.perse.l.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4]))
microbenchmark(
as.numeric(step.k.perse.l.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.perse.s.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 2)
)
step.k.perse.s.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, relevant.m, sigma.sq.svi) {
d.K.mm <- d.k.per.s(X.m, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.s(X.m, X.n, l = relevant.l, s = relevant.s, p = 52) * k.se(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(d.k.per.s(X.n, X.n, relevant.l, relevant.s, p = 52) * k.se(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.perse.l.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
microbenchmark(
as.numeric(step.k.perse.l.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.perse.s.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 2)
)
step.k.perse.m.svi <- function(X.m, X.n, X.m.2, X.n.2, relevant.l, relevant.s, relevant.m, sigma.sq.svi) {
d.K.mm <- k.per(X.m, l = relevant.l, s = relevant.s, p = 52) * d.k.se.l(X.m.2, X.m.2, relevant.m, 1)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- k.per(X.m, X.n, l = relevant.l, s = relevant.s, p = 52) * d.k.se.l(X.m.2, X.n.2, relevant.m, 1)
tr.d.K.nn <- sum(diag(k.per(X.n, X.n, relevant.l, relevant.s, p = 52) * d.k.se.l(X.n.2, X.n.2, relevant.m, 1)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.perse.m.svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4])),
rcpp_step_k_perse_svi(X.m, X.n, X.m.2, X.n.2, par.svi[1], par.svi[2], par.svi[3], par.svi[4], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 3)
)
source('~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_tester.R', echo=TRUE)
source('~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_tester.R', echo=TRUE)
source('~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_tester.R', echo=TRUE)
source('~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_tester.R', echo=TRUE)
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_perse_svi.cpp")
