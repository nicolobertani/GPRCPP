# initial auxiliary stuff
f.m.old <- f.m
iteration <- iteration + 1
# NM step
W <- - d2.likelihood.m(y.sample, f.m, M)
U <- chol(inv.K.mm + W)
b1 <- W %*% f.m + d.likelihood.m(y.sample, f.m, M)
b2 <- forwardsolve(t(U), b1)
f.m <- backsolve(U, b2)
# final auxiliary stuff
condition <- norm(f.m.old - f.m)
}
return(f.m)
}
logZ.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .1) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
chol.A <- chol(inv.K.mm + W)
logZ <- sum(dpois(y.sample, exp(M %*% f.m), log = T)) -
.5 * t(f.m) %*% inv.K.mm %*% f.m - sum(log(diag(chol.K.mm))) - sum(log(diag(chol.A)))
return(- as.numeric(logZ))
}
d.logZ <- function(par.hat) {
K.hat <- rcpp_k_se(X.sample, X.sample, par.hat[1], par.hat[2], T)
W <- - diag(d2.likelihood(y.sample, f.hat))
sqrtW <- diag(sqrt(diag(W)))
U <- chol(diag(sample.size) + sqrtW %*% K.hat %*% sqrtW)
b <- W %*% f.hat + d.likelihood(y.sample, f.hat)
a2 <- forwardsolve(t(U), sqrtW %*% K.hat %*% b)
a1 <- backsolve(U, a2)
a <- b - sqrtW %*% a1
f.hat <- K.hat %*% a
R <- sqrtW %*% backsolve(U, forwardsolve(t(U), sqrtW))
C <- forwardsolve(t(U), sqrtW %*% K.hat)
s2 <- - .5 * diag(diag(K.hat) - diag(t(C) %*% C)) %*% d3.likelihood(y.sample, f.hat)
# d1
C <- rcpp_d_k_se_l(X.sample, X.sample, par.hat[1], par.hat[2], T)
s1 <- .5 * t(a) %*% C %*% a - .5 * sum(diag(R %*% C))
b <- C %*% d.likelihood(y.sample, f.hat)
s3 <- b - K.hat %*% (R %*% b)
d.par.hat.1 <- s1 + t(s2) %*% s3
# d2
C <- rcpp_d_k_se_s(X.sample, X.sample, par.hat[1], par.hat[2], T)
s1 <- .5 * t(a) %*% C %*% a - .5 * sum(diag(R %*% C))
b <- C %*% d.likelihood(y.sample, f.hat)
s3 <- b - K.hat %*% (R %*% b)
d.par.hat.2 <- s1 + t(s2) %*% s3
return(- c(d.par.hat.1, d.par.hat.2))
}
d.logZ.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .1) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
chol.A <- chol(inv.K.mm + W)
inv.A <- chol2inv(chol.A)
output <- c()
output[1] <- t(y.sample) %*% rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T))) +
.5 * sum(diag(inv.K.mm %*% inv.A %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T))) -
.5 * t(d.f.m(par.hat)[[1]]) %*% sapply(seq(m.size), function(h) {diag(inv.A) %*% d3.likelihood.m(y.sample, f.m.hat, M, h)})
output[2] <- t(y.sample) %*% rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T))) +
.5 * sum(diag(inv.K.mm %*% inv.A %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T))) -
.5 * t(d.f.m(par.hat)[[2]]) %*% sapply(seq(m.size), function(h) {diag(inv.A) %*% d3.likelihood.m(y.sample, f.m.hat, M, h)})
return(- output)
}
# initiation
par.m.hat <- c(1, 1)
f.m.hat <- rep(1, m.size)
iteration <- 0
threshold <- 1e-3
repeat({
iteration <- iteration + 1
par.m.hat.old <- par.m.hat
if(iteration == 1) f.m.hat <- f.m.mode.finder(par.m.hat, f.m.hat)
par.opt <- optim(par.m.hat, logZ.m, d.logZ.m, method = 'CG')
par.m.hat <- par.opt$par
print(par.m.hat)
f.m.hat <- f.m.mode.finder(par.m.hat, f.m.hat)
if (sum(abs(par.m.hat.old - par.m.hat)) < threshold) break
})
f.m.mode.finder(par.m.hat, f.m.hat)
diag.jitter = .1
f.m = f.m.hat
par.hat
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
if (log(kappa(K.mm, exact = F), 10) > 4) warning("Condition number of order greater than 4.")
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
inv.K.mm <- chol2inv(chol(K.mm))
M <- K.nm %*% inv.K.mm
# NM algorithm
condition <- 1
iteration <- 0
iteration.max <- 1e2
while (condition > 1e-10 && iteration < iteration.max) {
# initial auxiliary stuff
f.m.old <- f.m
iteration <- iteration + 1
# NM step
W <- - d2.likelihood.m(y.sample, f.m, M)
U <- chol(inv.K.mm + W)
b1 <- W %*% f.m + d.likelihood.m(y.sample, f.m, M)
b2 <- forwardsolve(t(U), b1)
f.m <- backsolve(U, b2)
# final auxiliary stuff
condition <- norm(f.m.old - f.m)
}
M
W
d2.likelihood.m(y.sample, f.m, M)
M
f <- f.m
exp(c(M %*% f))
c(M %*% f)
# initiation
par.m.hat <- c(1, 2)
f.m.hat <- rep(1, m.size)
iteration <- 0
threshold <- 1e-3
repeat({
iteration <- iteration + 1
par.m.hat.old <- par.m.hat
if(iteration == 1) f.m.hat <- f.m.mode.finder(par.m.hat, f.m.hat)
par.opt <- optim(par.m.hat, logZ.m, d.logZ.m, method = 'CG')
par.m.hat <- par.opt$par
print(par.m.hat)
f.m.hat <- f.m.mode.finder(par.m.hat, f.m.hat)
if (sum(abs(par.m.hat.old - par.m.hat)) < threshold) break
})
# initiation
par.m.hat <- c(.2, 2)
f.m.hat <- rep(1, m.size)
iteration <- 0
threshold <- 1e-3
repeat({
iteration <- iteration + 1
par.m.hat.old <- par.m.hat
if(iteration == 1) f.m.hat <- f.m.mode.finder(par.m.hat, f.m.hat)
par.opt <- optim(par.m.hat, logZ.m, d.logZ.m, method = 'CG')
par.m.hat <- par.opt$par
print(par.m.hat)
f.m.hat <- f.m.mode.finder(par.m.hat, f.m.hat)
if (sum(abs(par.m.hat.old - par.m.hat)) < threshold) break
})
diag.jitter <- .1
K.mm <- rcpp_k_se(X.m, X.m, par.m.hat[1], par.m.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.hat.ld.star <- rcpp_k_se(X.m, X.test, par.m.hat[1], par.m.hat[2], F)
K.hat.d.star <- rcpp_k_se(X.test, X.test, par.m.hat[1], par.m.hat[2], T)
f.ld.star <- t(K.hat.ld.star) %*% inv.K.mm %*% f.m.hat
sds.ld <- sqrt(diag(V))
par(mfrow = c(2,1), oma = c(1,0,1,0) +.1, mar = c(0,0,2,0))
plot(z ~ X, xlim = x.limits, ylim = c(min(z), max(z)) * 1.05, type = 'l', xaxt = "n", yaxt = "n")
mtext("GP", side = 3, line = .5, cex = .8)
# lines(f.hat ~ X.sample, col = 2, lty = 1)
lines(f.star ~ X.test, col = 4, lty = 1)
lines(f.ld.star ~ X.test, col = 2, lty = 1)
lines(f.star + 2 * sds ~ X.test, lty = 2, col = 4)
lines(f.star - 2 * sds ~ X.test, lty = 2, col = 4)
lines(f.ld.star + 2 * sds.ld ~ X.test, lty = 2, col = 2)
lines(f.ld.star - 2 * sds.ld ~ X.test, lty = 2, col = 2)
legend(
'topleft',
legend = c("true", "full", "sparse"), title = "model:",
col = c(1, 4, 2),
lty = 1,
cex = .7
)
plot(p ~ X, xlim = x.limits, ylim = c(0, max(y.sample) + 1), type = 'l', xaxt = "n", yaxt = "n")
mtext("Poisson rate and realizations", side = 3, line = .5, cex = .8)
points(y.sample ~ X.sample, pch = 3)
points(rep(0, m.size) ~ X.m, pch = 16, col = 2, cex = .5)
# lines(link(f.hat) ~ X.sample, type = 'l', col = 2)
lines(link(f.star) ~ X.test, type = 'l', col = 4)
lines(link(f.ld.star) ~ X.test, type = 'l', col = 2)
# Functions ---------------------------------------------------------------
link <- function(z) {
exp(z)
}
link <- Vectorize(link)
sample.s <- function(par) {
sapply(par, rpois, n = 1)
}
sample.s <- Vectorize(sample.s)
likelihood <- function(y, f) {
y * f - exp(f) - log(factorial(y))
}
likelihood <- Vectorize(likelihood)
d.likelihood <- function(y, f) {
y - exp(f)
}
d.likelihood <- Vectorize(d.likelihood)
d2.likelihood <- function(y, f) {
- exp(f)
}
d2.likelihood <- Vectorize(d2.likelihood)
d3.likelihood <- function(y, f) {
- exp(f)
}
d3.likelihood <- Vectorize(d3.likelihood)
likelihood.m <- function(y, f, M) {
mf <- c(M %*% f)
sum(y * mf - exp(mf) - lfactorial(y))
}
d.likelihood.m <- function(y, f, M) {
E <- exp(c(M %*% f))
sapply(seq(length(f)), function(j) {
(y - E) %*% M[, j]
})
}
d2.likelihood.m <- function(y, f, M) {
E <- exp(c(M %*% f))
mx.out <- matrix(NA, length(f), length(f))
sapply(seq(m.size), function(j) {
sapply(seq(m.size), function(k) {
mx.out[j, k] <<- - E %*% (M[, j] * M[, k])
})})
}
d3.likelihood.m <- function(y, f, M, i) {
E <- exp(c(M %*% f))
mx.out <- c()
sapply(seq(m.size), function(k) {
mx.out[k] <<- - E %*% (M[, k] * M[, k] * M[, i])
})
}
f.mode.finder <- function(par.hat) {
K.hat <- rcpp_k_se(X.sample, X.sample, par.hat[1], par.hat[2], T)
# NM algorithm
condition <- 1
iteration <- 0
iteration.max <- 1e2
epsilon <- 1e-12
while (condition > 1e-6 && iteration < iteration.max) {
# initial auxiliary stuff
f.hat.old <- f.hat
iteration <- iteration + 1
# print(iteration)
# NM step
W <- - diag(d2.likelihood(y.sample, f.hat))
sqrtW <- diag(sqrt(diag(W)))
U <- chol(diag(sample.size) + sqrtW %*% K.hat %*% sqrtW)
b <- W %*% f.hat + d.likelihood(y.sample, f.hat)
a <- b - sqrtW %*% backsolve(U, forwardsolve(t(U), sqrtW %*% K.hat %*% b))
f.hat <- K.hat %*% a
# final auxiliary stuff
condition <- norm(f.hat.old - f.hat)
}
return(f.hat)
}
f.m.mode.finder <- function(par.hat, f.m = f.m.hat, diag.jitter = .1) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
if (log(kappa(K.mm, exact = F), 10) > 4) warning("Condition number of order greater than 4.")
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
inv.K.mm <- chol2inv(chol(K.mm))
M <- K.nm %*% inv.K.mm
# NM algorithm
condition <- 1
iteration <- 0
iteration.max <- 1e2
while (condition > 1e-10 && iteration < iteration.max) {
# initial auxiliary stuff
f.m.old <- f.m
iteration <- iteration + 1
# NM step
W <- - d2.likelihood.m(y.sample, f.m, M)
U <- chol(inv.K.mm + W)
b1 <- W %*% f.m + d.likelihood.m(y.sample, f.m, M)
b2 <- forwardsolve(t(U), b1)
f.m <- backsolve(U, b2)
# final auxiliary stuff
condition <- norm(f.m.old - f.m)
}
return(f.m)
}
logZ <- function(par.hat) {
K.hat <- rcpp_k_se(X.sample, X.sample, par.hat[1], par.hat[2], T)
W <- - diag(d2.likelihood(y.sample, f.hat))
sqrtW <- diag(sqrt(diag(W)))
U <- chol(diag(sample.size) + sqrtW %*% K.hat %*% sqrtW)
b <- W %*% f.hat + d.likelihood(y.sample, f.hat)
a2 <- forwardsolve(t(U), sqrtW %*% K.hat %*% b)
a1 <- backsolve(U, a2)
a <- b - sqrtW %*% a1
f.hat <- K.hat %*% a
logZ <- - .5 * t(a) %*% f.hat + sum(dpois(y.sample, link(f.hat), log = T)) - sum(log(diag(U)))
return(- as.numeric(logZ))
}
logZ.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .1) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
chol.A <- chol(inv.K.mm + W)
logZ <- sum(dpois(y.sample, exp(M %*% f.m), log = T)) -
.5 * t(f.m) %*% inv.K.mm %*% f.m - sum(log(diag(chol.K.mm))) - sum(log(diag(chol.A)))
return(- as.numeric(logZ))
}
d.logZ <- function(par.hat) {
K.hat <- rcpp_k_se(X.sample, X.sample, par.hat[1], par.hat[2], T)
W <- - diag(d2.likelihood(y.sample, f.hat))
sqrtW <- diag(sqrt(diag(W)))
U <- chol(diag(sample.size) + sqrtW %*% K.hat %*% sqrtW)
b <- W %*% f.hat + d.likelihood(y.sample, f.hat)
a2 <- forwardsolve(t(U), sqrtW %*% K.hat %*% b)
a1 <- backsolve(U, a2)
a <- b - sqrtW %*% a1
f.hat <- K.hat %*% a
R <- sqrtW %*% backsolve(U, forwardsolve(t(U), sqrtW))
C <- forwardsolve(t(U), sqrtW %*% K.hat)
s2 <- - .5 * diag(diag(K.hat) - diag(t(C) %*% C)) %*% d3.likelihood(y.sample, f.hat)
# d1
C <- rcpp_d_k_se_l(X.sample, X.sample, par.hat[1], par.hat[2], T)
s1 <- .5 * t(a) %*% C %*% a - .5 * sum(diag(R %*% C))
b <- C %*% d.likelihood(y.sample, f.hat)
s3 <- b - K.hat %*% (R %*% b)
d.par.hat.1 <- s1 + t(s2) %*% s3
# d2
C <- rcpp_d_k_se_s(X.sample, X.sample, par.hat[1], par.hat[2], T)
s1 <- .5 * t(a) %*% C %*% a - .5 * sum(diag(R %*% C))
b <- C %*% d.likelihood(y.sample, f.hat)
s3 <- b - K.hat %*% (R %*% b)
d.par.hat.2 <- s1 + t(s2) %*% s3
return(- c(d.par.hat.1, d.par.hat.2))
}
d.f.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .1) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
d.K.mm.l <- rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T)
d.K.mm.s <- rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T)
dfm <- list(solve(diag(m.size) + K.mm %*% W, d.K.mm.l %*% d.likelihood.m(y.sample, f.m, M)),
solve(diag(m.size) + K.mm %*% W, d.K.mm.s %*% d.likelihood.m(y.sample, f.m, M)))
return(dfm)
}
d.logZ.m <- function(par.hat, f.m = f.m.hat, diag.jitter = .1) {
K.mm <- rcpp_k_se(X.m, X.m, par.hat[1], par.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.nm <- rcpp_k_se(X.sample, X.m, par.hat[1], par.hat[2], F)
M <- K.nm %*% inv.K.mm
W <- - d2.likelihood.m(y.sample, f.m, M)
chol.A <- chol(inv.K.mm + W)
inv.A <- chol2inv(chol.A)
output <- c()
output[1] <- t(y.sample) %*% rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_l(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T))) +
.5 * sum(diag(inv.K.mm %*% inv.A %*% inv.K.mm %*% rcpp_d_k_se_l(X.m, X.m, par.hat[1], par.hat[2], T))) -
.5 * t(d.f.m(par.hat)[[1]]) %*% sapply(seq(m.size), function(h) {diag(inv.A) %*% d3.likelihood.m(y.sample, f.m.hat, M, h)})
output[2] <- t(y.sample) %*% rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
t(y.sample) %*% K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
t(rcpp_d_k_se_s(X.sample, X.m, par.hat[1], par.hat[2], F) %*% inv.K.mm %*% f.m -
K.nm %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m) %*%
exp(K.nm %*% inv.K.mm %*% f.m) +
.5 * t(f.m) %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T) %*% inv.K.mm %*% f.m -
.5 * sum(diag(inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T))) +
.5 * sum(diag(inv.K.mm %*% inv.A %*% inv.K.mm %*% rcpp_d_k_se_s(X.m, X.m, par.hat[1], par.hat[2], T))) -
.5 * t(d.f.m(par.hat)[[2]]) %*% sapply(seq(m.size), function(h) {diag(inv.A) %*% d3.likelihood.m(y.sample, f.m.hat, M, h)})
return(- output)
}
true.par.list <- list(c(.5, 1.8), c(2.1, .7))
for(draw in seq(length(true.par.list))) {
for (m.size in c(50, 10, 5)) {
# Simulate data -----------------------------------------------------------
x.limits <- c(-10, 10)
population.size <- 5e2
X <- as.matrix(seq(x.limits[1], x.limits[2], length.out = population.size))
population.size <- length(X)
K.true <- zapsmall(rcpp_k_se(X, X, true.par.list[[draw]][1], true.par.list[[draw]][2], T))
z <- mvrnorm(1, rep(0, population.size), K.true)
p <- link(z)
y <- sample.s(p)
# Simulate sample ---------------------------------------------------------
sample.size <- population.size
positions <- sort(sample(seq(population.size), sample.size))
X.sample <- as.matrix(X[positions])
y.sample <- y[positions]
# Lower dimensional inputs ---------------------------------------------------------
centroids <- kmeans(X, centers = m.size, iter.max = 1e3)
X.m <- centroids$centers
# Full model estimation under Laplace approximation ----------------------------------
# initiation
par.hat <- c(1, 1)
f.hat <- rep(1, sample.size)
iteration <- 0
threshold <- 1e-3
repeat({
iteration <- iteration + 1
par.hat.old <- par.hat
if(iteration == 1) f.hat <- f.mode.finder(par.hat)
par.opt <- optim(par.hat, logZ, d.logZ, method = 'CG')
par.hat <- par.opt$par
print(par.hat)
f.hat <- f.mode.finder(par.hat)
if (sum(abs(par.hat.old - par.hat)) < threshold) break
})
# Predictions with full model ----------------------------------
test.size <- population.size
X.test <- as.matrix(sort(sample(seq(x.limits[1], x.limits[2], length.out =  test.size))))
K.hat <- rcpp_k_se(X.sample, X.sample, par.hat[1], par.hat[2], T)
W <- - diag(d2.likelihood(y.sample, f.hat))
sqrtW <- diag(sqrt(diag(W)))
U <- chol(diag(sample.size) + diag(sqrt(diag(W))) %*% K.hat %*% diag(sqrt(diag(W))))
K.hat.star <- rcpp_k_se(X.sample, X.test, par.hat[1], par.hat[2], F)
K.hat.d.star <- rcpp_k_se(X.test, X.test, par.hat[1], par.hat[2], T)
f.star <- t(K.hat.star) %*% d.likelihood(y.sample, f.hat)
v <- forwardsolve(t(U), sqrtW %*% K.hat.star)
V <- zapsmall(K.hat.d.star - t(v) %*% v)
sds <- sqrt(diag(V))
# Lower dimensional model estimation under Laplace approximation ----------------------------------
# initiation
par.m.hat <- c(.1, 1)
f.m.hat <- rep(1, m.size)
iteration <- 0
threshold <- 1e-3
repeat({
iteration <- iteration + 1
par.m.hat.old <- par.m.hat
if(iteration == 1) f.m.hat <- f.m.mode.finder(par.m.hat, f.m.hat)
par.opt <- optim(par.m.hat, logZ.m, d.logZ.m, method = 'CG')
par.m.hat <- par.opt$par
print(par.m.hat)
f.m.hat <- f.m.mode.finder(par.m.hat, f.m.hat)
if (sum(abs(par.m.hat.old - par.m.hat)) < threshold) break
})
# Predictions with lower dimensional model ----------------------------------
diag.jitter <- .1
K.mm <- rcpp_k_se(X.m, X.m, par.m.hat[1], par.m.hat[2], T) + diag(diag.jitter, m.size)
chol.K.mm <- chol(K.mm)
inv.K.mm <- chol2inv(chol.K.mm)
K.hat.ld.star <- rcpp_k_se(X.m, X.test, par.m.hat[1], par.m.hat[2], F)
K.hat.d.star <- rcpp_k_se(X.test, X.test, par.m.hat[1], par.m.hat[2], T)
f.ld.star <- t(K.hat.ld.star) %*% inv.K.mm %*% f.m.hat
V <- zapsmall(K.hat.d.star - t(K.hat.ld.star) %*% inv.K.mm %*% K.hat.ld.star)
sds.ld <- sqrt(diag(V))
par(mfrow = c(2,1), oma = c(1,0,1,0) +.1, mar = c(0,0,2,0))
plot(z ~ X, xlim = x.limits, ylim = c(min(z), max(z)) * 1.05, type = 'l', xaxt = "n", yaxt = "n")
mtext("GP", side = 3, line = .5, cex = .8)
# lines(f.hat ~ X.sample, col = 2, lty = 1)
lines(f.star ~ X.test, col = 4, lty = 1)
lines(f.ld.star ~ X.test, col = 2, lty = 1)
lines(f.star + 2 * sds ~ X.test, lty = 2, col = 4)
lines(f.star - 2 * sds ~ X.test, lty = 2, col = 4)
lines(f.ld.star + 2 * sds.ld ~ X.test, lty = 2, col = 2)
lines(f.ld.star - 2 * sds.ld ~ X.test, lty = 2, col = 2)
legend(
'topleft',
legend = c("true", "full", "sparse"), title = "model:",
col = c(1, 4, 2),
lty = 1,
cex = .7
)
plot(p ~ X, xlim = x.limits, ylim = c(0, max(y.sample) + 1), type = 'l', xaxt = "n", yaxt = "n")
mtext("Poisson rate and realizations", side = 3, line = .5, cex = .8)
points(y.sample ~ X.sample, pch = 3)
points(rep(0, m.size) ~ X.m, pch = 16, col = 2, cex = .5)
# lines(link(f.hat) ~ X.sample, type = 'l', col = 2)
lines(link(f.star) ~ X.test, type = 'l', col = 4)
lines(link(f.ld.star) ~ X.test, type = 'l', col = 2)
lines(link(f.star + 2 * sds) ~ X.test, lty = 2, col = 4)
lines(link(f.star - 2 * sds) ~ X.test, lty = 2, col = 4)
lines(link(f.ld.star + 2 * sds.ld) ~ X.test, lty = 2, col = 2)
lines(link(f.ld.star - 2 * sds.ld) ~ X.test, lty = 2, col = 2)
legend(
'topleft',
legend = c("sample", "sparse inputs"),
col = c(1, 2),
pch = c(3, 16),
cex = .7
)
mtext(paste0("Parameter draw: ", draw, " - ", m.size, " inducing points"), side = 3, line = -.2, cex = 1.2, outer = T)
}
}
paste(par.hat, collapse = " - ")
paste(round(par.hat, 3), collapse = " - ")
paste(round(par.m.hat, 3))
paste0("GP - Full: ", paste(round(par.hat, 3), collapse = " - "), " - LD: ", paste(round(par.m.hat, 3)))
paste(round(par.hat, 3), collapse = " - ")
paste0("GP - Full: ", paste(round(par.hat, 3), collapse = " - ")
paste0("GP - Full: ", paste(round(par.hat, 3), collapse = " - "))
paste0("GP - Full: ", paste(round(par.hat, 3), collapse = " - "))
paste0("GP - Full: ", paste(round(par.hat, 3), collapse = " - "), " - LD: ", paste(round(par.m.hat, 3)))
paste("GP - Full: ", paste(round(par.hat, 3), collapse = " - "), " - LD: ", paste(round(par.m.hat, 3)), collapse = "")
paste0(c("GP - Full: ", paste(round(par.hat, 3), collapse = " - "), " - LD: ", paste(round(par.m.hat, 3))))
paste(c("GP - Full: ", paste(round(par.hat, 3), collapse = " - "), " - LD: ", paste(round(par.m.hat, 3))), collapse = "")
